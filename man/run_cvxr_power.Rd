% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_cvxr_power.R
\name{run_cvxr_power}
\alias{run_cvxr_power}
\title{Power maximization using disciplined convex programming}
\usage{
run_cvxr_power(prob, opts)
}
\arguments{
\item{prob}{a convex programming problem constructed using \code{\link[=make_problem]{make_problem()}}}

\item{opts}{optimization options, for instance from \code{\link[=make_default_opts]{make_default_opts()}}
\itemize{
\item \code{opts$verbose} boolean for if you want solver to display progress
\item \code{opts$time_limit} time limit for gurobi solver in units of seconds
\item \code{opts$MIPGapAbs} threshold for terminanting solver, measures gap between
convex relaxation of problem and the actual integer constrained programming problem
}}
}
\value{
disciplined convex programming result, obtained by calling \code{\link[CVXR:psolve]{CVXR::solve()}}
}
\description{
Use \link{CVXR} with \link{GUROBI} backend to construct optimal sampling strategies for
fixed sampling budget and frequency uncertainty.

For lattice constraints, it is usually much more efficient to use the simulated
annealing solver \code{\link[=run_sa_power]{run_sa_power()}}.
}
\author{
Turner Silverthorne
}
